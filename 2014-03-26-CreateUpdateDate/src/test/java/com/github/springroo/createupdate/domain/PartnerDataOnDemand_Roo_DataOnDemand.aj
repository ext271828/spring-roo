// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.github.springroo.createupdate.domain;

import com.github.springroo.createupdate.domain.Partner;
import com.github.springroo.createupdate.domain.PartnerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PartnerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PartnerDataOnDemand: @Component;
    
    private Random PartnerDataOnDemand.rnd = new SecureRandom();
    
    private List<Partner> PartnerDataOnDemand.data;
    
    public Partner PartnerDataOnDemand.getNewTransientPartner(int index) {
        Partner obj = new Partner();
        setCreatedDate(obj, index);
        setModifiedDate(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void PartnerDataOnDemand.setCreatedDate(Partner obj, int index) {
        Calendar createdDate = Calendar.getInstance();
        obj.setCreatedDate(createdDate);
    }
    
    public void PartnerDataOnDemand.setModifiedDate(Partner obj, int index) {
        Calendar modifiedDate = Calendar.getInstance();
        obj.setModifiedDate(modifiedDate);
    }
    
    public void PartnerDataOnDemand.setName(Partner obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public Partner PartnerDataOnDemand.getSpecificPartner(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Partner obj = data.get(index);
        Long id = obj.getId();
        return Partner.findPartner(id);
    }
    
    public Partner PartnerDataOnDemand.getRandomPartner() {
        init();
        Partner obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Partner.findPartner(id);
    }
    
    public boolean PartnerDataOnDemand.modifyPartner(Partner obj) {
        return false;
    }
    
    public void PartnerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Partner.findPartnerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Partner' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Partner>();
        for (int i = 0; i < 10; i++) {
            Partner obj = getNewTransientPartner(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
